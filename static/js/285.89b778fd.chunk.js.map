{"version":3,"file":"static/js/285.89b778fd.chunk.js","mappings":"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","sources":["webpack://easy-shop/./src/components/Profile/MyPurchases/MyPurchases.module.scss?94f3","components/Profile/MyPurchases/MyPurchases.jsx","webpack://easy-shop/./src/components/Shared/Pagination/Pagination.module.scss?dfd1","components/Shared/Pagination/Pagination.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ordersWrapper\":\"MyPurchases_ordersWrapper__vsq4G\",\"heading\":\"MyPurchases_heading__kYPkn\",\"optionsList\":\"MyPurchases_optionsList__5fine\",\"ordersList\":\"MyPurchases_ordersList__tC2k7\",\"orderItem\":\"MyPurchases_orderItem__vBofq\",\"orderInfoWrapper\":\"MyPurchases_orderInfoWrapper__UfCyV\",\"orderInfoItem\":\"MyPurchases_orderInfoItem__-VdP8\",\"orderSum\":\"MyPurchases_orderSum__ERXLf\",\"orderBottomWrapper\":\"MyPurchases_orderBottomWrapper__AikN3\",\"waitingPhrase\":\"MyPurchases_waitingPhrase__NhpV9\",\"btnLight\":\"MyPurchases_btnLight__gkeiQ\",\"selectButton\":\"MyPurchases_selectButton__AOro8\",\"active\":\"MyPurchases_active__XPaGl\",\"message\":\"MyPurchases_message__5UQb3\"};","import { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from \"react-redux\";\n// import { deleteOrderById } from \"redux/order/order-operations\";\nimport { getUserOrders } from 'redux/order/order-operations';\nimport {\n  getLoadingOrders,\n  selectUserOrders,\n  selectUserOrdersTotalPages,\n} from 'redux/order/order-selectors';\nimport { getLogin } from 'redux/auth/auth-selectors';\n\nimport OrderProductsList from \"components/Shared/OrderProductsList/OrderProductsList\";\nimport Pagination from 'components/Shared/Pagination/Pagination';\nimport s from './MyPurchases.module.scss';\n\n\nconst MyShoppings = () => {\n  const dispatch = useDispatch();\n  const isLogin = useSelector(getLogin);\n  const isLoading = useSelector(getLoadingOrders);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentSelector, setcurrentSelector] = useState(\"all\");\n\n  useEffect(() => {\n    dispatch(\n      getUserOrders({\n        page: currentPage,\n        selectorName: currentSelector,\n      })\n    );\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, [dispatch, currentPage, currentSelector]);\n\n  const userOrders = useSelector(selectUserOrders);\n  const totalPages = useSelector(selectUserOrdersTotalPages);\n\n  // for pagination\n  const handlePageChange = page => {\n    setCurrentPage(page);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const handleButtonClick = optionName => {\n    setcurrentSelector(optionName);\n    setCurrentPage(1);\n  };\n  // const handleDeteleOrder = (id) => {\n  //   dispatch(deleteOrderById(id));\n  // }\n  return (\n    <>\n      <div className={s.ordersWrapper}>\n        <div>\n          <p className={s.heading}>За статусом</p>\n          <ul className={s.optionsList}>\n            <li>\n              <button\n                className={\n                  currentSelector === 'all'\n                    ? `${s.selectButton} ${s.active}`\n                    : s.selectButton\n                }\n                onClick={() => handleButtonClick('all')}\n              >\n                Всі\n              </button>\n            </li>\n            <li>\n              <button\n                className={\n                  currentSelector === 'new'\n                    ? `${s.selectButton} ${s.active}`\n                    : s.selectButton\n                }\n                onClick={() => handleButtonClick('new')}\n              >\n                Нові\n              </button>\n            </li>\n            <li>\n              <button\n                className={\n                  currentSelector === 'confirmed'\n                    ? `${s.selectButton} ${s.active}`\n                    : s.selectButton\n                }\n                onClick={() => handleButtonClick('confirmed')}\n              >\n                Підтверджені\n              </button>\n            </li>\n            {/* <li>Виконані</li> */}\n            <li>\n              <button\n                className={\n                  currentSelector === 'canceled'\n                    ? `${s.selectButton} ${s.active}`\n                    : s.selectButton\n                }\n                onClick={() => handleButtonClick('canceled')}\n              >\n                Відхилені\n              </button>\n            </li>\n          </ul>\n        </div>\n        {userOrders.length > 0 && (\n          <ul className={s.ordersList}>\n            {userOrders.map(\n              ({\n                _id,\n                sellerName,\n                orderSum,\n                orderDate,\n                orderNumber,\n                products,\n                productInfo,\n                delivery,\n              }) => (\n                <li className={s.orderItem} key={_id}>\n                  <div className={s.orderInfoWrapper}>\n                    <div className={s.orderInfoItem}>\n                      <p>Продавець:</p>\n                      <p>{sellerName}</p>\n                    </div>\n                    <div className={s.orderInfoItem}>\n                      <p>Замовлення &#8470; {orderNumber}</p>\n                      <p>{orderDate}</p>\n                    </div>\n                    {/* <button\n                      type=\"button\"\n                      onClick={() => handleDeteleOrder(_id)}\n                    >\n                      del\n                    </button> */}\n                  </div>\n                  <OrderProductsList\n                    productsForOrder={productInfo}\n                    products={products}\n                  />\n                  <div className={s.orderBottomWrapper}>\n                    {delivery !== '' ? (\n                      <p className={s.waitingPhrase}>Очікує підтвердження</p>\n                    ) : (\n                      <NavLink\n                        to={isLogin ? '/checkout' : '/login'}\n                        className={s.btnLight}\n                        state={{ orderId: _id }}\n                      >\n                        Оформити замовлення\n                      </NavLink>\n                    )}\n\n                    <p\n                      className={s.orderSum}\n                    >{`Сума замовлення: ${orderSum} грн.`}</p>\n                  </div>\n                </li>\n              )\n            )}\n          </ul>\n        )}\n        {!isLoading && userOrders.length === 0 && (\n          <p className={s.message}>Замовлень з таким статусом у вас ще немає</p>\n        )}\n      </div>\n      {totalPages > 1 && (\n        <Pagination\n          totalPages={totalPages}\n          currentPage={currentPage}\n          onPageChange={handlePageChange}\n        />\n      )}\n    </>\n  );\n}\n\nexport default MyShoppings;","// extracted by mini-css-extract-plugin\nexport default {\"paginationSection\":\"Pagination_paginationSection__1F1CP\",\"pagesSet\":\"Pagination_pagesSet__2tGzL\",\"pageBox\":\"Pagination_pageBox__Ti6uC\",\"active\":\"Pagination_active__yaPsQ\",\"btnLeft\":\"Pagination_btnLeft__Gnp4s\",\"btnRight\":\"Pagination_btnRight__O85qW\"};","import React from 'react';\n\nimport s from './Pagination.module.scss';\n\nconst Pagination = ({ totalPages, currentPage, onPageChange }) => {\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    const displayRange = 2; // Кількість сторінок, які відображаються навколо поточної сторінки\n\n    let startPage = Math.max(1, currentPage - displayRange);\n    let endPage = Math.min(totalPages, currentPage + displayRange);\n\n    if (currentPage <= displayRange) {\n      endPage = Math.min(displayRange * 2 + 1, totalPages);\n    }\n\n    if (currentPage >= totalPages - displayRange) {\n      startPage = Math.max(totalPages - displayRange * 2, 1);\n    }\n\n    for (let page = startPage; page <= endPage; page++) {\n      pageNumbers.push(page);\n    }\n\n    return pageNumbers;\n  };\n\n  return (\n    <div className={s.paginationSection}>\n      <button \n        className={`${s.btnLeft} ${s.pageBox}`}\n        onClick={() => onPageChange(currentPage - 1)}\n        disabled={currentPage === 1}\n      >\n        &lt;\n      </button>\n      <div className={s.pagesSet}>\n        {getPageNumbers().map(page => (\n          <button\n            key={page}\n            onClick={() => onPageChange(page)}\n            className={currentPage === page ? s.active : s.pageBox}\n          >\n            {page}\n          </button>\n        ))}\n      </div>\n      <button\n        className={`${s.btnRight} ${s.pageBox}`}\n        onClick={() => onPageChange(currentPage + 1)}\n        disabled={currentPage === totalPages}\n      >\n        &gt;\n      </button>\n    </div>\n  );\n};\n\nexport default Pagination;\n"],"names":["dispatch","useDispatch","isLogin","useSelector","getLogin","isLoading","getLoadingOrders","useState","currentPage","setCurrentPage","currentSelector","setcurrentSelector","useEffect","getUserOrders","page","selectorName","window","scrollTo","top","behavior","userOrders","selectUserOrders","totalPages","selectUserOrdersTotalPages","handleButtonClick","optionName","className","s","onClick","length","map","_id","sellerName","orderSum","orderDate","orderNumber","products","productInfo","delivery","OrderProductsList","productsForOrder","to","state","orderId","Pagination","onPageChange","disabled","pageNumbers","startPage","Math","max","endPage","min","displayRange","push","getPageNumbers"],"sourceRoot":""}