{"version":3,"file":"static/js/795.7739f9f8.chunk.js","mappings":"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","sources":["webpack://easy-shop/./src/components/Dialogue/Dialogue.module.scss?2cf4","components/Dialogue/Dialogue.jsx","webpack://easy-shop/./src/components/Profile/MySales/MySales.module.scss?fad3","components/Profile/MySales/MySales.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogueContainer\":\"Dialogue_dialogueContainer__FuS7j\",\"additionalOpts\":\"Dialogue_additionalOpts__o-iwF\",\"avatar\":\"Dialogue_avatar__Snahc\",\"textInputArea\":\"Dialogue_textInputArea__7QqLK\",\"dialogueGroup\":\"Dialogue_dialogueGroup__CccDt\",\"dialogueGroupCustomer\":\"Dialogue_dialogueGroupCustomer__bT6EX\",\"dialogueBox\":\"Dialogue_dialogueBox__Zqye0\",\"dialogueMessage\":\"Dialogue_dialogueMessage__tL3Cl\",\"dialogueMessageRight\":\"Dialogue_dialogueMessageRight__KBBVw\",\"textDate\":\"Dialogue_textDate__qAQ-I\",\"textarea\":\"Dialogue_textarea__F4Goc\",\"questionButton\":\"Dialogue_questionButton__et0nJ\"};","import { useEffect, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { createDialogue } from 'redux/dialogue/dialogue-operations';\nimport { getLogin, getUser, getUserAvatar } from 'redux/auth/auth-selectors';\nimport {\n  getDialogueStore,\n  getDialoguesArrayStoreNew,\n  getIsNewMessage,\n} from 'redux/dialogue/dialogue-selectors';\nimport {\n  clearDialogue,\n  changeStatusIsNewMessage,\n  updateDialoguesArray,\n  updateDialogueStore,\n} from 'redux/dialogue/dialogue-slice';\n\nimport {\n  getDialogue,\n  deleteDialogueNewMessage,\n} from 'redux/dialogue/dialogue-operations';\n\n// import { BiMessageDetail } from 'react-icons/bi';\nimport Text from 'components/Shared/Text/Text';\nimport Avatar from 'components/Profile/Avatar/Avatar';\nimport Button from 'components/Shared/Button/Button';\n\nimport s from './Dialogue.module.scss';\n\nconst Dialogue = ({ productInfo }) => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const productId = productInfo._id;\n  const productOwner = productInfo.owner;\n  const selectedDialogueId = productInfo.userDialogue;\n  const customerId = productInfo.customer;\n\n  const userAvatar = useSelector(getUserAvatar);\n  const user = useSelector(getUser);\n  const isUserLogin = useSelector(getLogin);\n  const dialoguesArray = useSelector(getDialoguesArrayStoreNew);\n  const isNewMessage = useSelector(getIsNewMessage);\n\n  const [myQuestion, setMyQuestion] = useState('');\n  const [isShowComponent, setIsShowComponent] = useState(false);\n  const [isProductId, setIsProductId] = useState(null);\n  const [isCustomerId, setIsCustomerId] = useState(null);\n  const isDeleteInProgressRef = useRef(false);\n  const dialogueStore = useSelector(getDialogueStore);\n\n  let dialogueArray = [];\n  let newMessageArray = [];\n  let isInfoDialogue = false;\n\n  useEffect(() => {\n    if (productId && !customerId) {\n      setIsProductId(productId);\n    }\n    if (productId && customerId) {\n      setIsProductId(productId);\n      setIsCustomerId(customerId);\n    } else {\n      return;\n    }\n  }, [productId, customerId]);\n\n  useEffect(() => {\n    if (dialoguesArray.length > 0 && !isNewMessage) {\n      const changedDialogues = dialoguesArray.filter(dialogue => {\n        const newMessageArray = dialogue.newMessages;\n        return newMessageArray.some(obj => obj.userReceiver === user._id);\n      });\n\n      let currentDialogue = dialogueStore._id\n        ? dialogueStore._id\n        : selectedDialogueId;\n      const isChanged = changedDialogues.some(\n        dialogue => dialogue._id === currentDialogue\n      );\n      if (isChanged) {\n        dispatch(changeStatusIsNewMessage(true));\n        dispatch(updateDialoguesArray(currentDialogue));\n      } else {\n        return;\n      }\n    } else {\n      return;\n    }\n  }, [\n    dispatch,\n    dialoguesArray,\n    user._id,\n    dialogueStore._id,\n    selectedDialogueId,\n    isNewMessage,\n  ]);\n\n  useEffect(() => {\n    const getDialogueNew = async () => {\n      isDeleteInProgressRef.current = false;\n      setIsShowComponent(false);\n      dispatch(clearDialogue());\n      dispatch(changeStatusIsNewMessage(false));\n      if (!isProductId || !isUserLogin || selectedDialogueId) {\n        return;\n      }\n      await dispatch(\n        getDialogue({ productId: isProductId, customerId: isCustomerId })\n      );\n      setIsShowComponent(true);\n    };\n    getDialogueNew();\n  }, [\n    dispatch,\n    isProductId,\n    selectedDialogueId,\n    isUserLogin,\n    isNewMessage,\n    isCustomerId,\n  ]);\n\n  useEffect(() => {\n    const getDialogueNew = async () => {\n      isDeleteInProgressRef.current = false;\n      setIsShowComponent(false);\n      dispatch(clearDialogue());\n      dispatch(changeStatusIsNewMessage(false));\n      if (!selectedDialogueId) {\n        return;\n      }\n      await dispatch(getDialogue({ dialogueId: selectedDialogueId }));\n\n      setIsShowComponent(true);\n    };\n    getDialogueNew();\n  }, [dispatch, selectedDialogueId, isNewMessage]);\n\n  useEffect(() => {\n    if (dialogueStore.length === 0) {\n      return;\n    }\n    if (\n      isDeleteInProgressRef.current ||\n      dialogueStore.newMessages.length === 0\n    ) {\n      return;\n    } else {\n      const currentDialogue = dialogueStore._id;\n      const newMessageArray = dialogueStore.newMessages;\n      const userId = user._id;\n      const userNewMessage = newMessageArray.filter(\n        messageObj => messageObj.userReceiver === userId\n      );\n\n      const deleteNewMessageCallback = async () => {\n        if (isDeleteInProgressRef.current) {\n          return;\n        }\n        isDeleteInProgressRef.current = true;\n        await dispatch(\n          deleteDialogueNewMessage({\n            dialogueId: currentDialogue,\n            arrayNewMessage: userNewMessage,\n          })\n        );\n        await dispatch(updateDialogueStore(currentDialogue));\n      };\n\n      const timer = setTimeout(deleteNewMessageCallback, 20000);\n      return () => {\n        clearTimeout(timer);\n        deleteNewMessageCallback();\n      };\n    }\n  }, [dispatch, dialogueStore, user._id]);\n\n  const isInfo = dialogueArray => {\n    if (dialogueArray[0].textOwner === '64cccb7e5b8c2eb706fe655d') {\n      isInfoDialogue = true;\n    } else {\n      isInfoDialogue = false;\n    }\n  };\n\n  if (dialogueStore.length === 0) {\n    dialogueArray = [];\n    newMessageArray = [];\n  } else {\n    dialogueArray = dialogueStore.messageArray.slice().reverse();\n    newMessageArray = dialogueStore.newMessages;\n    isInfo(dialogueArray);\n  }\n\n  const findAvatar = id => {\n    let myAvatar = '';\n    let otherAvatar = '';\n    const firstAvatar = dialogueStore.userAvatar;\n    const secondAvatar = dialogueStore.productOwnerAvatar;\n    if (user.userAvatar === firstAvatar) {\n      myAvatar = firstAvatar;\n      otherAvatar = secondAvatar;\n    } else {\n      myAvatar = secondAvatar;\n      otherAvatar = firstAvatar;\n    }\n    if (id === user._id) {\n      return myAvatar;\n    } else {\n      return otherAvatar;\n    }\n  };\n\n  const handleQuestionChange = e => {\n    setMyQuestion(e.target.value);\n  };\n\n  const handleButtonClick = async isUserLogin => {\n    if (isUserLogin) {\n      await dispatch(\n        createDialogue({\n          text: myQuestion,\n          productId: isProductId,\n          productOwner: productOwner,\n          dialogueId: dialogueStore._id,\n          customerId: isCustomerId,\n        })\n      );\n      setMyQuestion('');\n    } else {\n      navigate('/login');\n      return;\n    }\n  };\n\n  const isMessageNew = (text, date) => {\n    if (!newMessageArray || newMessageArray.length === 0) {\n      return false;\n    }\n    const userId = user._id;\n    const isNewMessageArray = newMessageArray.filter(\n      messageObj =>\n        messageObj.userReceiver === userId &&\n        messageObj.message === text &&\n        messageObj.date === date\n    );\n\n    if (isNewMessageArray.length === 0) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  return (\n    <>\n      {isShowComponent && (\n        <div className={s.dialogueContainer}>\n          {!isInfoDialogue && (\n            <div className={s.additionalOpts}>\n              {/* <BiMessageDetail className={s.favoriteIcon} /> */}\n              {!isCustomerId && (\n                <Text text=\"Запитати\" textClass=\"productText\" />\n              )}\n              {isCustomerId && (\n                <Text text=\"Запитати покупця\" textClass=\"productText\" />\n              )}\n            </div>\n          )}\n          {dialogueArray.length === 0 && (\n            <div className={s.avatar}>\n              <Avatar avatarClass=\"photoDialogueLeft\" src={userAvatar} />\n            </div>\n          )}\n          {dialogueArray.length > 0 && (\n            <ul\n              className={\n                !isCustomerId ? s.dialogueGroup : s.dialogueGroupCustomer\n              }\n            >\n              {dialogueArray.map((dialogue, index) => (\n                <li key={index}>\n                  <div className={s.dialogueBox}>\n                    {dialogue.textOwner === user._id ? (\n                      <>\n                        <Avatar\n                          avatarClass=\"photoDialogueLeft\"\n                          src={findAvatar(dialogue.textOwner)}\n                        />\n                        <div className={s.dialogueMessage}>\n                          <Text\n                            text={dialogue.text}\n                            textClass={\n                              isMessageNew(dialogue.text, dialogue.date)\n                                ? 'productTextDialogueNewMessage'\n                                : 'productTextDialogue'\n                            }\n                          />\n                          <div className={s.textDate}>\n                            <Text\n                              text={dialogue.date}\n                              textClass=\"productTextDate\"\n                            />\n                          </div>\n                        </div>\n                      </>\n                    ) : (\n                      <>\n                        <div className={s.dialogueMessageRight}>\n                          <Text\n                            text={dialogue.text}\n                            textClass={\n                              isMessageNew(dialogue.text, dialogue.date)\n                                ? 'productTextDialogueNewMessage'\n                                : 'productTextDialogue'\n                            }\n                          />\n                          <div className={s.textDate}>\n                            <Text\n                              text={dialogue.date}\n                              textClass=\"productTextDate\"\n                            />\n                          </div>\n                        </div>\n                        <Avatar\n                          avatarClass=\"photoDialogueRight\"\n                          src={findAvatar(dialogue.textOwner)}\n                        />\n                      </>\n                    )}\n                  </div>\n                </li>\n              ))}\n            </ul>\n          )}\n          {!isInfoDialogue && (\n            <div className={s.textInputArea}>\n              <textarea\n                className={s.textarea}\n                name=\"myQuestion\"\n                value={myQuestion}\n                onChange={handleQuestionChange}\n                rows={5}\n                cols={40}\n              />\n              <div className={s.questionButton}>\n                <Button\n                  text={isUserLogin ? 'Надіслати' : 'Авторизуйтеся'}\n                  btnClass=\"btnLight\"\n                  handleClick={() => handleButtonClick(isUserLogin)}\n                />\n\n                {!isUserLogin && (\n                  <Text\n                    text=\"*Щоб написати продавцю, увійдіть в обліковий запис або зареєструйтеся\"\n                    textClass=\"messageTextBtn\"\n                  />\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Dialogue;\n","// extracted by mini-css-extract-plugin\nexport default {\"ordersWrapper\":\"MySales_ordersWrapper__zezf+\",\"ordersList\":\"MySales_ordersList__s6tus\",\"orderItem\":\"MySales_orderItem__l-5wO\",\"orderInfoWrapper\":\"MySales_orderInfoWrapper__rgdFU\",\"orderInfoItem\":\"MySales_orderInfoItem__zGXXl\",\"orderSum\":\"MySales_orderSum__MPLUJ\",\"orderBottomWrapper\":\"MySales_orderBottomWrapper__P6Du2\",\"waitingPhrase\":\"MySales_waitingPhrase__o59Sm\",\"message\":\"MySales_message__x8quZ\",\"buttonTrashWrapper\":\"MySales_buttonTrashWrapper__Pmv-o\",\"messageWindow\":\"MySales_messageWindow__BmH+V\",\"dismissButton\":\"MySales_dismissButton__9iaeT\",\"buttonBottomWrapper\":\"MySales_buttonBottomWrapper__nRbFL\",\"btnLight\":\"MySales_btnLight__XU4y4\"};","import { useEffect, useState } from 'react';\n// import { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUserSales, updateOrderStatus } from 'redux/order/order-operations';\nimport {\n  getLoadingOrders,\n  selectUserSales,\n  selectUserSalesTotalPages,\n} from 'redux/order/order-selectors';\n// import { getID, getLogin } from 'redux/auth/auth-selectors';\nimport { getID } from 'redux/auth/auth-selectors';\nimport { selectUserReviews } from 'redux/review/review-selectors';\nimport { getUserReviews } from 'redux/review/review-operations';\nimport { orderConfirmationDialogue } from 'redux/dialogue/dialogue-operations';\n\nimport OrderProductsList from 'components/Shared/OrderProductsList/OrderProductsList';\nimport Pagination from 'components/Shared/Pagination/Pagination';\nimport Button from 'components/Shared/Button/Button';\nimport OrderStatusList from 'components/Shared/OrderStatusList/OrderStatusList';\nimport FeedbackWindow from 'components/Shared/FeedbackWindow/FeedbackWindow';\nimport Dialogue from 'components/Dialogue/Dialogue';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport s from './MySales.module.scss';\n\nconst MySales = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getLoadingOrders);\n  const userId = useSelector(getID);\n  // const isLogin = useSelector(getLogin);\n  const userSales = useSelector(selectUserSales);\n  const totalPages = useSelector(selectUserSalesTotalPages);\n  const myReview = useSelector(selectUserReviews);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [currentSelector, setcurrentSelector] = useState('all');\n  const [isFeedbackWindowOpen, setIsFeedbackWindowOpen] = useState(false);\n  const [orderToFeedbackWindow, setOrderToFeedbackWindow] = useState({});\n  const [isMessage, setIsMessage] = useState(false);\n  const [productId, setProductId] = useState(null);\n  const [customerId, setCustomerId] = useState(null);\n\n  useEffect(() => {\n    dispatch(getUserReviews({ userId }));\n  }, [dispatch, userId, orderToFeedbackWindow]);\n\n  useEffect(() => {\n    dispatch(\n      getUserSales({\n        page: currentPage,\n        selectorName: currentSelector,\n      })\n    );\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, [dispatch, currentPage, currentSelector]);\n\n  // for pagination\n  const handlePageChange = page => {\n    setCurrentPage(page);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const handleMessageClick = (product, customer) => {\n    setIsMessage(true);\n    setProductId(product);\n    setCustomerId(customer);\n  };\n\n  const handleDismissClick = () => {\n    setIsMessage(false);\n    setProductId(null);\n    setCustomerId(null);\n  };\n\n  const handleButtonClick = optionName => {\n    setcurrentSelector(optionName);\n    setCurrentPage(1);\n  };\n\n  const handleChangeOrderStatus = (id, confirmed, typeDialogue) => {\n    dispatch(\n      updateOrderStatus({\n        orderId: id,\n        confirmed: confirmed,\n        statusNew: false,\n      })\n    );\n    dispatch(\n      getUserSales({\n        page: currentPage,\n        selectorName: currentSelector,\n      })\n    );\n    dispatch(\n      orderConfirmationDialogue({\n        orderId: id,\n        typeDialogue: typeDialogue,\n      })\n    );\n  };\n\n  const toggleIsOpen = (orderId, sellerId, productInfo, customerId) => {\n    if (orderId) {\n      setOrderToFeedbackWindow({ orderId, sellerId, productInfo, customerId });\n      setIsFeedbackWindowOpen(!isFeedbackWindowOpen);\n      return;\n    }\n    setOrderToFeedbackWindow({});\n    setIsFeedbackWindowOpen(!isFeedbackWindowOpen);\n  };\n\n  useEffect(() => {\n    document.body.style.overflow = isFeedbackWindowOpen ? 'hidden' : 'unset';\n  }, [isFeedbackWindowOpen]);\n\n  return (\n    <>\n      <div className={s.ordersWrapper}>\n        <OrderStatusList\n          currentSelector={currentSelector}\n          handleButtonClick={handleButtonClick}\n        />\n        {userSales.length > 0 && (\n          <ul className={s.ordersList}>\n            {userSales.map(\n              ({\n                _id,\n                orderSum,\n                orderDate,\n                orderNumber,\n                products,\n                productInfo,\n                client,\n                statusNew,\n                confirmed,\n                sellerId,\n              }) => {\n                const isBtnRewiewShown = myReview.find(\n                  ({ orderId }) => orderId === _id\n                );\n                return (\n                  <li className={s.orderItem} key={_id}>\n                    <div className={s.orderInfoWrapper}>\n                      <div className={s.orderInfoItem}>\n                        <p>Покупець:</p>\n                        <p>\n                          {client.customerSecondName} {client.customerFirstName}\n                        </p>\n                        <p>Номер телефону: {client.customerTel}</p>\n                      </div>\n                      <div className={s.orderInfoItem}>\n                        <p>Замовлення &#8470; {orderNumber}</p>\n                        <p>{orderDate}</p>\n                      </div>\n                    </div>\n                    <OrderProductsList\n                      productsForOrder={productInfo}\n                      products={products}\n                    />\n                    <div className={s.orderBottomWrapper}>\n                      {statusNew === true ? (\n                        <>\n                          <Button\n                            type=\"button\"\n                            btnClass=\"btnLight\"\n                            text=\"Підтвердити замовлення\"\n                            handleClick={() =>\n                              handleChangeOrderStatus(_id, true, 'sales')\n                            }\n                          />\n                          <Button\n                            type=\"button\"\n                            btnClass=\"btnDark\"\n                            text=\"Скасувати замовлення\"\n                            handleClick={() =>\n                              handleChangeOrderStatus(_id, false, 'cancel')\n                            }\n                          />\n                        </>\n                      ) : (\n                        <p className={s.waitingPhrase}>\n                          {confirmed === true ? 'Підтверджено' : 'Скасовано'}\n                        </p>\n                      )}\n\n                      <p\n                        className={s.orderSum}\n                      >{`Сума замовлення: ${orderSum} грн.`}</p>\n                    </div>\n                    {statusNew === false && (\n                      <div className={s.buttonBottomWrapper}>\n                        <Button\n                          type=\"button\"\n                          btnClass=\"btnLight\"\n                          text=\"Питання покупцю\"\n                          handleClick={() =>\n                            handleMessageClick(\n                              products[0]._id,\n                              client.customerId\n                            )\n                          }\n                        />\n                        {!isBtnRewiewShown && (\n                          <Button\n                            btnClass=\"btnLight\"\n                            text=\"Залишити відгук\"\n                            handleClick={() =>\n                              toggleIsOpen(\n                                _id,\n                                sellerId,\n                                productInfo,\n                                client.customerId\n                              )\n                            }\n                          />\n                        )}\n                      </div>\n                    )}\n                    {isFeedbackWindowOpen && (\n                      <FeedbackWindow\n                        hideWindow={toggleIsOpen}\n                        orderToFeedbackWindow={orderToFeedbackWindow}\n                        feedbackType={'asSeller'}\n                      />\n                    )}\n                  </li>\n                );\n              }\n            )}\n          </ul>\n        )}\n        {!isLoading && userSales.length === 0 && (\n          <p className={s.message}>Замовлень з таким статусом у вас ще немає</p>\n        )}\n      </div>\n      {totalPages > 1 && (\n        <Pagination\n          totalPages={totalPages}\n          currentPage={currentPage}\n          onPageChange={handlePageChange}\n        />\n      )}\n      {isMessage && (\n        <div className={s.messageWindow}>\n          <button className={s.dismissButton} onClick={handleDismissClick}>\n            <FontAwesomeIcon icon={faTimes} size=\"lg\" />\n          </button>\n          <Dialogue\n            productInfo={{\n              _id: productId,\n              owner: userId,\n              customer: customerId,\n            }}\n          />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MySales;\n"],"names":["productInfo","dispatch","useDispatch","navigate","useNavigate","productId","_id","productOwner","owner","selectedDialogueId","userDialogue","customerId","customer","userAvatar","useSelector","getUserAvatar","user","getUser","isUserLogin","getLogin","dialoguesArray","getDialoguesArrayStoreNew","isNewMessage","getIsNewMessage","useState","myQuestion","setMyQuestion","isShowComponent","setIsShowComponent","isProductId","setIsProductId","isCustomerId","setIsCustomerId","isDeleteInProgressRef","useRef","dialogueStore","getDialogueStore","dialogueArray","newMessageArray","isInfoDialogue","useEffect","length","changedDialogues","filter","dialogue","newMessages","some","obj","userReceiver","currentDialogue","changeStatusIsNewMessage","updateDialoguesArray","getDialogueNew","current","clearDialogue","getDialogue","dialogueId","userId","userNewMessage","messageObj","deleteNewMessageCallback","deleteDialogueNewMessage","arrayNewMessage","updateDialogueStore","timer","setTimeout","clearTimeout","messageArray","slice","reverse","textOwner","isInfo","findAvatar","id","myAvatar","otherAvatar","firstAvatar","secondAvatar","productOwnerAvatar","handleButtonClick","createDialogue","text","isMessageNew","date","message","className","s","Text","textClass","Avatar","avatarClass","src","map","index","name","value","onChange","e","target","rows","cols","Button","btnClass","handleClick","isLoading","getLoadingOrders","getID","userSales","selectUserSales","totalPages","selectUserSalesTotalPages","myReview","selectUserReviews","currentPage","setCurrentPage","currentSelector","setcurrentSelector","isFeedbackWindowOpen","setIsFeedbackWindowOpen","orderToFeedbackWindow","setOrderToFeedbackWindow","isMessage","setIsMessage","setProductId","setCustomerId","getUserReviews","getUserSales","page","selectorName","window","scrollTo","top","behavior","handleChangeOrderStatus","confirmed","typeDialogue","updateOrderStatus","orderId","statusNew","orderConfirmationDialogue","toggleIsOpen","sellerId","document","body","style","overflow","OrderStatusList","optionName","orderSum","orderDate","orderNumber","products","client","isBtnRewiewShown","find","customerSecondName","customerFirstName","customerTel","OrderProductsList","productsForOrder","type","product","FeedbackWindow","hideWindow","feedbackType","Pagination","onPageChange","onClick","icon","faTimes","size","Dialogue"],"sourceRoot":""}