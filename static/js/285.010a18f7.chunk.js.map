{"version":3,"file":"static/js/285.010a18f7.chunk.js","mappings":"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","sources":["webpack://easy-shop/./src/components/Profile/MyPurchases/MyPurchases.module.scss?94f3","components/Profile/MyPurchases/MyPurchases.jsx","webpack://easy-shop/./src/components/Shared/Pagination/Pagination.module.scss?dfd1","components/Shared/Pagination/Pagination.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"ordersWrapper\":\"MyPurchases_ordersWrapper__vsq4G\",\"heading\":\"MyPurchases_heading__kYPkn\",\"optionsList\":\"MyPurchases_optionsList__5fine\",\"ordersList\":\"MyPurchases_ordersList__tC2k7\",\"orderItem\":\"MyPurchases_orderItem__vBofq\",\"orderInfoWrapper\":\"MyPurchases_orderInfoWrapper__UfCyV\",\"orderInfoItem\":\"MyPurchases_orderInfoItem__-VdP8\",\"orderSum\":\"MyPurchases_orderSum__ERXLf\",\"orderBottomWrapper\":\"MyPurchases_orderBottomWrapper__AikN3\",\"waitingPhrase\":\"MyPurchases_waitingPhrase__NhpV9\",\"btnLight\":\"MyPurchases_btnLight__gkeiQ\",\"selectButton\":\"MyPurchases_selectButton__AOro8\",\"active\":\"MyPurchases_active__XPaGl\"};","import { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from \"react-redux\";\n// import { deleteOrderById } from \"redux/order/order-operations\";\nimport { getUserOrders } from 'redux/order/order-operations';\nimport {\n  selectUserOrders,\n  selectUserOrdersTotalPages,\n} from 'redux/order/order-selectors';\nimport { getLogin } from 'redux/auth/auth-selectors';\n\nimport OrderProductsList from \"components/Shared/OrderProductsList/OrderProductsList\";\nimport Pagination from 'components/Shared/Pagination/Pagination';\nimport s from './MyPurchases.module.scss';\n\n\nconst MyShoppings = () => {\n  const dispatch = useDispatch();\n  const isLogin = useSelector(getLogin);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  // console.log('currentPage', currentPage);\n  const [currentSelector, setcurrentSelector] = useState(\"all\");\n  // console.log('currentSelector', currentSelector);\n\n  const totalPages = useSelector(selectUserOrdersTotalPages);\n  // console.log(\"totalPages\", totalPages);\n\n  useEffect(() => {\n    dispatch(getUserOrders(currentPage));\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, [dispatch, currentPage]);\n\n  const userOrders = useSelector(selectUserOrders);\n  // userOrders && console.log(userOrders);\n\n  // for pagination\n  const handlePageChange = page => {\n    setCurrentPage(page);\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  const handleButtonClick = optionName => {\n    setcurrentSelector(optionName);\n  };\n\n  // const handleDeteleOrder = (id) => {\n  //   dispatch(deleteOrderById(id));\n  // }\n\n  return (\n    <>\n      <div className={s.ordersWrapper}>\n        <div>\n          <p className={s.heading}>За статусом</p>\n          <ul className={s.optionsList}>\n            <li>\n              <button\n                className={\n                  currentSelector === 'all'\n                    ? `${s.selectButton} ${s.active}`\n                    : s.selectButton\n                }\n                onClick={() => handleButtonClick('all')}\n              >\n                Всі\n              </button>\n            </li>\n            <li>\n              <button\n                className={\n                  currentSelector === 'new'\n                    ? `${s.selectButton} ${s.active}`\n                    : s.selectButton\n                }\n                onClick={() => handleButtonClick('new')}\n              >\n                Нові\n              </button>\n            </li>\n            <li>\n              <button\n                className={\n                  currentSelector === 'confirmed'\n                    ? `${s.selectButton} ${s.active}`\n                    : s.selectButton\n                }\n                onClick={() => handleButtonClick('confirmed')}\n              >\n                Підтверджені\n              </button>\n            </li>\n            {/* <li>Виконані</li> */}\n            <li>\n              <button\n                className={\n                  currentSelector === 'canceled'\n                    ? `${s.selectButton} ${s.active}`\n                    : s.selectButton\n                }\n                onClick={() => handleButtonClick('canceled')}\n              >\n                Відхилені\n              </button>\n            </li>\n          </ul>\n        </div>\n        <ul className={s.ordersList}>\n          {userOrders?.map(\n            ({\n              _id,\n              sellerName,\n              orderSum,\n              orderDate,\n              orderNumber,\n              products,\n              productInfo,\n              delivery,\n            }) => (\n              <li className={s.orderItem} key={_id}>\n                <div className={s.orderInfoWrapper}>\n                  <div className={s.orderInfoItem}>\n                    <p>Продавець:</p>\n                    <p>{sellerName}</p>\n                  </div>\n                  <div className={s.orderInfoItem}>\n                    <p>Замовлення &#8470; {orderNumber}</p>\n                    <p>{orderDate}</p>\n                  </div>\n\n                  {/* <button\n                      type=\"button\"\n                      onClick={() => handleDeteleOrder(_id)}\n                    >\n                      del\n                    </button> */}\n                </div>\n                <OrderProductsList\n                  productsForOrder={productInfo}\n                  products={products}\n                />\n                <div className={s.orderBottomWrapper}>\n                  {delivery !== '' ? (\n                    <p className={s.waitingPhrase}>Очікує підтвердження</p>\n                  ) : (\n                    <NavLink\n                      to={isLogin ? '/checkout' : '/login'}\n                      className={s.btnLight}\n                      state={{ orderId: _id }}\n                    >\n                      Оформити замовлення\n                    </NavLink>\n                  )}\n\n                  <p\n                    className={s.orderSum}\n                  >{`Сума замовлення: ${orderSum} грн.`}</p>\n                </div>\n              </li>\n            )\n          )}\n        </ul>\n      </div>\n      <Pagination\n        totalPages={totalPages}\n        currentPage={currentPage}\n        onPageChange={handlePageChange}\n      />\n    </>\n  );\n}\n\nexport default MyShoppings;","// extracted by mini-css-extract-plugin\nexport default {\"paginationSection\":\"Pagination_paginationSection__1F1CP\",\"pagesSet\":\"Pagination_pagesSet__2tGzL\",\"pageBox\":\"Pagination_pageBox__Ti6uC\",\"active\":\"Pagination_active__yaPsQ\",\"btnLeft\":\"Pagination_btnLeft__Gnp4s\",\"btnRight\":\"Pagination_btnRight__O85qW\"};","import React from 'react';\n\nimport s from './Pagination.module.scss';\n\nconst Pagination = ({ totalPages, currentPage, onPageChange }) => {\n  const getPageNumbers = () => {\n    const pageNumbers = [];\n    const displayRange = 2; // Кількість сторінок, які відображаються навколо поточної сторінки\n\n    let startPage = Math.max(1, currentPage - displayRange);\n    let endPage = Math.min(totalPages, currentPage + displayRange);\n\n    if (currentPage <= displayRange) {\n      endPage = Math.min(displayRange * 2 + 1, totalPages);\n    }\n\n    if (currentPage >= totalPages - displayRange) {\n      startPage = Math.max(totalPages - displayRange * 2, 1);\n    }\n\n    for (let page = startPage; page <= endPage; page++) {\n      pageNumbers.push(page);\n    }\n\n    return pageNumbers;\n  };\n\n  return (\n    <div className={s.paginationSection}>\n      <button \n        className={`${s.btnLeft} ${s.pageBox}`}\n        onClick={() => onPageChange(currentPage - 1)}\n        disabled={currentPage === 1}\n      >\n        &lt;\n      </button>\n      <div className={s.pagesSet}>\n        {getPageNumbers().map(page => (\n          <button\n            key={page}\n            onClick={() => onPageChange(page)}\n            className={currentPage === page ? s.active : s.pageBox}\n          >\n            {page}\n          </button>\n        ))}\n      </div>\n      <button\n        className={`${s.btnRight} ${s.pageBox}`}\n        onClick={() => onPageChange(currentPage + 1)}\n        disabled={currentPage === totalPages}\n      >\n        &gt;\n      </button>\n    </div>\n  );\n};\n\nexport default Pagination;\n"],"names":["dispatch","useDispatch","isLogin","useSelector","getLogin","useState","currentPage","setCurrentPage","currentSelector","setcurrentSelector","totalPages","selectUserOrdersTotalPages","useEffect","getUserOrders","window","scrollTo","top","behavior","userOrders","selectUserOrders","handleButtonClick","optionName","className","s","onClick","map","_id","sellerName","orderSum","orderDate","orderNumber","products","productInfo","delivery","OrderProductsList","productsForOrder","to","state","orderId","Pagination","onPageChange","page","disabled","pageNumbers","startPage","Math","max","endPage","min","displayRange","push","getPageNumbers"],"sourceRoot":""}